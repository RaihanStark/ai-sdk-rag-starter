import { shifts } from "../schema/shifts";

// Helper function to create shift dates
const createShiftDate = (daysFromNow: number, hour: number, minute: number = 0) => {
  const date = new Date();
  date.setDate(date.getDate() + daysFromNow);
  date.setHours(hour, minute, 0, 0);
  return date;
};

// Helper function to calculate hours between two dates
const calculateHours = (start: Date, end: Date, breakMinutes: number = 0) => {
  const diffMs = end.getTime() - start.getTime();
  const diffHours = diffMs / (1000 * 60 * 60);
  const breakHours = breakMinutes / 60;
  return (diffHours - breakHours).toFixed(2);
};

// Generate shifts for the past week and upcoming week
export const generateShifts = (employeeMap: Record<string, string>) => {
  const shiftsData = [];
  
  // Week 1 - Last Week (Completed Shifts)
  // Monday - Regular Day
  shiftsData.push(
    {
      employeeId: employeeMap["MGR001"],
      shiftDate: createShiftDate(-7, 8),
      scheduledStartTime: createShiftDate(-7, 8),
      scheduledEndTime: createShiftDate(-7, 17),
      actualStartTime: createShiftDate(-7, 8),
      actualEndTime: createShiftDate(-7, 17, 30),
      breakDuration: 30,
      status: "completed" as const,
      shiftType: "regular" as const,
      role: "manager",
      scheduledHours: "8.50",
      actualHours: "9.00",
      regularHours: "8.00",
      overtimeHours: "1.00",
      hourlyRate: "35.00",
      totalPay: "317.50",
      salesGenerated: "5200.00",
      laborCostPercentage: "6.11",
      productivityScore: "92.00",
      isApproved: true,
    },
    {
      employeeId: employeeMap["CHEF001"],
      shiftDate: createShiftDate(-7, 6),
      scheduledStartTime: createShiftDate(-7, 6),
      scheduledEndTime: createShiftDate(-7, 14),
      actualStartTime: createShiftDate(-7, 5, 45),
      actualEndTime: createShiftDate(-7, 14, 15),
      breakDuration: 30,
      status: "completed" as const,
      shiftType: "regular" as const,
      role: "head_chef",
      station: "main kitchen",
      scheduledHours: "7.50",
      actualHours: "8.00",
      regularHours: "8.00",
      overtimeHours: "0.00",
      hourlyRate: "32.00",
      totalPay: "256.00",
      dishesProduced: 120,
      productivityScore: "95.00",
      isApproved: true,
    },
    {
      employeeId: employeeMap["SRV001"],
      shiftDate: createShiftDate(-7, 11),
      scheduledStartTime: createShiftDate(-7, 11),
      scheduledEndTime: createShiftDate(-7, 19),
      actualStartTime: createShiftDate(-7, 11),
      actualEndTime: createShiftDate(-7, 19, 30),
      breakDuration: 30,
      status: "completed" as const,
      shiftType: "regular" as const,
      role: "head_server",
      station: "section A",
      scheduledHours: "7.50",
      actualHours: "8.00",
      regularHours: "8.00",
      overtimeHours: "0.00",
      hourlyRate: "16.00",
      totalPay: "128.00",
      salesGenerated: "1800.00",
      customersServed: 45,
      tablesServed: 12,
      laborCostPercentage: "7.11",
      productivityScore: "88.00",
      isApproved: true,
    },
    {
      employeeId: employeeMap["BAR001"],
      shiftDate: createShiftDate(-7, 16),
      scheduledStartTime: createShiftDate(-7, 16),
      scheduledEndTime: createShiftDate(-7, 23),
      actualStartTime: createShiftDate(-7, 16),
      actualEndTime: createShiftDate(-7, 23, 30),
      breakDuration: 30,
      status: "completed" as const,
      shiftType: "regular" as const,
      role: "head_bartender",
      station: "main bar",
      scheduledHours: "6.50",
      actualHours: "7.00",
      regularHours: "7.00",
      overtimeHours: "0.00",
      hourlyRate: "22.00",
      totalPay: "154.00",
      salesGenerated: "2100.00",
      drinksServed: 150,
      laborCostPercentage: "7.33",
      productivityScore: "90.00",
      isApproved: true,
    },
  );

  // Friday - Busy Day (Multiple Shifts)
  shiftsData.push(
    {
      employeeId: employeeMap["COOK001"],
      shiftDate: createShiftDate(-3, 10),
      scheduledStartTime: createShiftDate(-3, 10),
      scheduledEndTime: createShiftDate(-3, 18),
      actualStartTime: createShiftDate(-3, 10),
      actualEndTime: createShiftDate(-3, 19),
      breakDuration: 30,
      status: "completed" as const,
      shiftType: "regular" as const,
      role: "line_cook",
      station: "grill",
      scheduledHours: "7.50",
      actualHours: "8.50",
      regularHours: "8.00",
      overtimeHours: "0.50",
      hourlyRate: "18.00",
      totalPay: "157.50",
      dishesProduced: 95,
      productivityScore: "87.00",
      isApproved: true,
    },
    {
      employeeId: employeeMap["COOK002"],
      shiftDate: createShiftDate(-3, 14),
      scheduledStartTime: createShiftDate(-3, 14),
      scheduledEndTime: createShiftDate(-3, 22),
      actualStartTime: createShiftDate(-3, 14),
      actualEndTime: createShiftDate(-3, 22, 30),
      breakDuration: 30,
      status: "completed" as const,
      shiftType: "regular" as const,
      role: "line_cook",
      station: "saut√©",
      scheduledHours: "7.50",
      actualHours: "8.00",
      regularHours: "8.00",
      overtimeHours: "0.00",
      hourlyRate: "17.50",
      totalPay: "140.00",
      dishesProduced: 88,
      productivityScore: "85.00",
      isApproved: true,
    },
    {
      employeeId: employeeMap["SRV002"],
      shiftDate: createShiftDate(-3, 17),
      scheduledStartTime: createShiftDate(-3, 17),
      scheduledEndTime: createShiftDate(-3, 23),
      actualStartTime: createShiftDate(-3, 17),
      actualEndTime: createShiftDate(-3, 23, 45),
      breakDuration: 0,
      status: "completed" as const,
      shiftType: "regular" as const,
      role: "server",
      station: "section B",
      scheduledHours: "6.00",
      actualHours: "6.75",
      regularHours: "6.75",
      overtimeHours: "0.00",
      hourlyRate: "12.00",
      totalPay: "81.00",
      salesGenerated: "1500.00",
      customersServed: 38,
      tablesServed: 10,
      laborCostPercentage: "5.40",
      productivityScore: "91.00",
      isApproved: true,
    },
    {
      employeeId: employeeMap["BAR002"],
      shiftDate: createShiftDate(-3, 18),
      scheduledStartTime: createShiftDate(-3, 18),
      scheduledEndTime: createShiftDate(-2, 2),
      actualStartTime: createShiftDate(-3, 18),
      actualEndTime: createShiftDate(-2, 2, 30),
      breakDuration: 30,
      status: "completed" as const,
      shiftType: "regular" as const,
      role: "bartender",
      station: "main bar",
      scheduledHours: "7.50",
      actualHours: "8.00",
      regularHours: "8.00",
      overtimeHours: "0.00",
      hourlyRate: "18.00",
      totalPay: "144.00",
      salesGenerated: "2500.00",
      drinksServed: 180,
      laborCostPercentage: "5.76",
      productivityScore: "93.00",
      isApproved: true,
    },
  );

  // Saturday - Weekend Busy (Overtime)
  shiftsData.push(
    {
      employeeId: employeeMap["CHEF002"],
      shiftDate: createShiftDate(-2, 10),
      scheduledStartTime: createShiftDate(-2, 10),
      scheduledEndTime: createShiftDate(-2, 21),
      actualStartTime: createShiftDate(-2, 9, 45),
      actualEndTime: createShiftDate(-2, 22),
      breakDuration: 60,
      status: "completed" as const,
      shiftType: "overtime" as const,
      role: "sous_chef",
      station: "main kitchen",
      scheduledHours: "10.00",
      actualHours: "11.25",
      regularHours: "8.00",
      overtimeHours: "3.25",
      hourlyRate: "26.00",
      totalPay: "334.75",
      dishesProduced: 160,
      productivityScore: "88.00",
      isApproved: true,
      managerNotes: "Stayed late to help with large party",
    },
    {
      employeeId: employeeMap["HOST001"],
      shiftDate: createShiftDate(-2, 17),
      scheduledStartTime: createShiftDate(-2, 17),
      scheduledEndTime: createShiftDate(-2, 23),
      actualStartTime: createShiftDate(-2, 17),
      actualEndTime: createShiftDate(-2, 23),
      breakDuration: 0,
      status: "completed" as const,
      shiftType: "regular" as const,
      role: "host",
      scheduledHours: "6.00",
      actualHours: "6.00",
      regularHours: "6.00",
      overtimeHours: "0.00",
      hourlyRate: "14.00",
      totalPay: "84.00",
      customersServed: 120,
      productivityScore: "94.00",
      isApproved: true,
    },
  );

  // Current Week - Mix of Completed and Scheduled
  // Monday - Some completed, some scheduled
  shiftsData.push(
    {
      employeeId: employeeMap["MGR001"],
      shiftDate: createShiftDate(0, 8),
      scheduledStartTime: createShiftDate(0, 8),
      scheduledEndTime: createShiftDate(0, 17),
      breakDuration: 30,
      status: "scheduled" as const,
      shiftType: "regular" as const,
      role: "manager",
      scheduledHours: "8.50",
      hourlyRate: "35.00",
    },
    {
      employeeId: employeeMap["PREP001"],
      shiftDate: createShiftDate(0, 6),
      scheduledStartTime: createShiftDate(0, 6),
      scheduledEndTime: createShiftDate(0, 11),
      breakDuration: 0,
      status: "scheduled" as const,
      shiftType: "regular" as const,
      role: "prep_cook",
      station: "prep station",
      scheduledHours: "5.00",
      hourlyRate: "15.50",
    },
  );

  // Tuesday
  shiftsData.push(
    {
      employeeId: employeeMap["SRV003"],
      shiftDate: createShiftDate(1, 17),
      scheduledStartTime: createShiftDate(1, 17),
      scheduledEndTime: createShiftDate(1, 22),
      breakDuration: 0,
      status: "scheduled" as const,
      shiftType: "regular" as const,
      role: "server",
      station: "section C",
      scheduledHours: "5.00",
      hourlyRate: "12.00",
    },
    {
      employeeId: employeeMap["BUS001"],
      shiftDate: createShiftDate(1, 16),
      scheduledStartTime: createShiftDate(1, 16),
      scheduledEndTime: createShiftDate(1, 21),
      breakDuration: 0,
      status: "scheduled" as const,
      shiftType: "regular" as const,
      role: "busser",
      scheduledHours: "5.00",
      hourlyRate: "13.00",
    },
  );

  // Weekend - Special Event
  shiftsData.push(
    {
      employeeId: employeeMap["CHEF001"],
      shiftDate: createShiftDate(5, 10),
      scheduledStartTime: createShiftDate(5, 10),
      scheduledEndTime: createShiftDate(5, 22),
      breakDuration: 60,
      status: "scheduled" as const,
      shiftType: "special_event" as const,
      role: "head_chef",
      station: "main kitchen",
      scheduledHours: "11.00",
      hourlyRate: "32.00",
      managerNotes: "Wedding event - 150 guests",
    },
    {
      employeeId: employeeMap["AMGR001"],
      shiftDate: createShiftDate(5, 14),
      scheduledStartTime: createShiftDate(5, 14),
      scheduledEndTime: createShiftDate(5, 23),
      breakDuration: 30,
      status: "scheduled" as const,
      shiftType: "special_event" as const,
      role: "assistant_manager",
      scheduledHours: "8.50",
      hourlyRate: "28.00",
      managerNotes: "Wedding event - floor manager",
    },
  );

  // Add some no-shows and training shifts
  shiftsData.push(
    {
      employeeId: employeeMap["RUN001"],
      shiftDate: createShiftDate(-5, 18),
      scheduledStartTime: createShiftDate(-5, 18),
      scheduledEndTime: createShiftDate(-5, 22),
      breakDuration: 0,
      status: "no_show" as const,
      shiftType: "regular" as const,
      role: "food_runner",
      scheduledHours: "4.00",
      hourlyRate: "13.50",
      totalPay: "0.00",
      managerNotes: "Called in sick - no replacement found",
    },
    {
      employeeId: employeeMap["SEAS001"],
      shiftDate: createShiftDate(-6, 10),
      scheduledStartTime: createShiftDate(-6, 10),
      scheduledEndTime: createShiftDate(-6, 14),
      breakDuration: 0,
      status: "completed" as const,
      shiftType: "training" as const,
      role: "server",
      scheduledHours: "4.00",
      actualHours: "4.00",
      regularHours: "4.00",
      overtimeHours: "0.00",
      hourlyRate: "12.00",
      totalPay: "48.00",
      managerNotes: "Training shift - POS system and menu",
      isApproved: true,
    },
  );

  return shiftsData;
};